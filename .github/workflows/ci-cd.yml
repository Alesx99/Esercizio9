name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Build application
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
    - name: Send success notification
      if: success()
      run: |
        echo "‚úÖ Deployment successful!"
        # Qui potresti inviare notifiche
        
    - name: Send failure notification
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        # Qui potresti inviare notifiche di errore

  notify_on_failure:
    name: Failure Notification
    if: failure()
    runs-on: ubuntu-latest
    needs: [lint_and_test, build_docker, deploy]
    steps:
      - name: Notify failure via email (example)
        run: |
          echo "‚ùå PIPELINE FAILED!"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Failed at: $(date)"
          
      - name: Create issue on failure
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Pipeline failed on main branch`,
              body: `## Pipeline Failure Report
            
            **Repository:** ${context.repo.owner}/${context.repo.repo}
            **Branch:** ${context.ref}
            **Commit:** ${context.sha}
            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            **Failed at:** ${new Date().toISOString()}
            
            ### Failed Jobs:
            ${context.job}
            
            Please check the [workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for more details.
            
            ---
            *This issue was automatically created by GitHub Actions*`,
              labels: ['bug', 'pipeline-failure']
            });
            console.log(`Created issue: ${issue.data.html_url}`);

  notify_on_success:
    name: Success Notification
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [lint_and_test, build_docker, deploy]
    steps:
      - name: Success notification
        run: |
          echo "‚úÖ PIPELINE SUCCESS!"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deployed to production successfully!"
          echo "Completed at: $(date)" 